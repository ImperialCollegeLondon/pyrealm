name: Test and build

# When does this run - new, reopened or updated PRs, pushes to main or develop and when
# the workflow is called by another workflow, such as the publishing actions.
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_call:

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  test:
    needs: qa
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2.1.6
      with:
        poetry-version: 1.2.2

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: poetry run pytest -m "not profiling" --cov-report xml

    - name: Upload coverage reports to Codecov
      id: codecov
      if: success() && (matrix.os == 'ubuntu-latest' && matrix.python-version == 3.10)
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Run the profiling test suite
      id: profiling
      if: success() && (matrix.os == 'ubuntu-latest' && matrix.python-version == 3.10)
      run: |
        sudo apt-get install graphviz
        poetry run pytest -m "profiling" --profile-svg
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    # This step only runs if the profiling succeeds - so only runs on ubuntu/3.10 and 
    # will itself fail if the benchmarking fails. It also copies over the call graph.
    - name: Benchmark performance and copy call graph
      id: benchmarking
      if: ${{steps.profiling.outcome == 'success'}}
      run: |
        poetry run python profiling/run_benchmarking.py prof/combined.prof profiling/profiling-database.csv profiling/benchmark-fails.csv ${{ env.COMMIT_SHORT_SHA }} --update-on-pass --plot-path profiling/performance-plot.png
        cp prof/combined.svg profiling/call-graph.svg

    # This runs if the benchmark passes or fails (so still only on ubuntu/3.10) and is
    # skipped on other runners or if the profiling step fails. The commit message
    # includes [skip actions] to avoid triggering a new testing round
    - uses: stefanzweifel/git-auto-commit-action@v5
      if: always() && steps.benchmarking.outcome != 'skipped'
      with:
        commit_message: Auto-generated profiling results [skip actions]
        file_pattern: 'profiling/*'

  docs_build:
    needs: qa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: 1.2.2

      - name: Install dependencies
        run: poetry install

      - name: Set ipython kernel
        run: poetry run python -m ipykernel install --user --name=pyrealm_python3
      
      - name: Build docs using sphinx
        run: |
          cd docs
          poetry run sphinx-build -W --keep-going source build

      - name: Archive built docs for error checking on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: built-docs
          path: docs/build
          retention-days: 2
